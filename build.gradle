import aQute.bnd.osgi.Processor

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:6.1.0'
    }
}

apply plugin: 'java-library'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'org.jdrupes.httpcodec'
description = "HTTP coders and decoders for non-blocking I/O"

ext.releaseVersion = "2.0.3"
ext.isSnapshot = false
version = releaseVersion + (isSnapshot ? "-SNAPSHOT" : "")

archivesBaseName = 'httpcodec'

repositories {
    mavenCentral()
}

ext {
    isCiBuild = System.getenv().get("CI") == 'true'
    isJitPackBuild = System.getenv().get("JITPACK") == 'true'
}

configurations {
    javadocTaglets
}

dependencies {
	implementation 'com.sun.activation:javax.activation:1.2.0'
    compileOnly 'org.osgi:org.osgi.annotation:6.0.0'
    testImplementation 'junit:junit:4.12'

	// Use gradle mechanims to get the artifact to baseline against.
	// We baseline against the previous release 
	// (latest excluding current)
	baseline("${group}:${archivesBaseName}:(,${releaseVersion})") {
		transitive false
	}
}

// Configure sensible layout
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }

    test {
        java {
            srcDir 'test'
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

String bundleVersion = releaseVersion +
	(isSnapshot ? ".-\${tstamp}-SNAPSHOT" : ".rel")
		
jar {
	manifest {
		attributes('Bundle-Version': bundleVersion)
	}
}

if (project.hasProperty('ignoreBaselineFailures')) {
	baseline {
		ignoreFailures true
	}
}

dependencies {
	javadocTaglets "org.jdrupes.taglets:plantuml-taglet:1.0.3"
	// javadocTaglets 'com.github.mnlipp:jdrupes-taglets:1.0.2'
}

javadoc {
    // Does not work on JitPack, no /usr/bin/dot
    enabled = JavaVersion.current().isJava8() && !isJitPackBuild    

    options.tagletPath = configurations.javadocTaglets.files as List
    options.taglets = ["org.jdrupes.taglets.plantUml.Taglet"]

    classpath = project.sourceSets.main.compileClasspath
    source = sourceSets.main.allJava
	options.addStringOption("overview", "overview.md")
	inputs.file "overview.md"
	options.addBooleanOption("linksource", true)
	options.stylesheetFile(file("stylesheet.css"))
    options.addStringOption("bottom", file("misc/javadoc.bottom.txt").text)
    options.addStringOption("link", "http://docs.oracle.com/javase/8/docs/api/")
    destinationDir = file("../org.jdrupes.httpcodec.gh-pages/javadoc")
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

task javadocJar(type: Jar) {
	dependsOn "javadoc"
	from javadoc.destinationDir
	classifier "javadoc"
}

// Allow build without signing information (e.g. travis)
if (project.hasProperty('signing.keyId')) {
	signing {
		sign configurations.archives
	}
}

// MavenPublishing 

publishing {
        
    repositories {
        maven {
            name "snapshot"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
        maven {
            name "release"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
    }
}

// Additional configuration of publishing
apply plugin: ConfigurePublishing

configurePublishing {
    withPomXml {
        asNode().with {
            appendNode('url', 'https://github.com/mnlipp/jdrupes-httpcodec')
            appendNode('scm').with {
                appendNode('url', 'scm:git@github.com:mnlipp/jdrupes-httpcodec.git')
                appendNode('connection', 'scm:git@github.com:mnlipp/jdrupes-httpcodec.git')
                appendNode('developerConnection', 'git@github.com:mnlipp/jdrupes-httpcodec.git')
            }
            appendNode('licenses').with {
                appendNode('license').with {
                    appendNode('name', 'LGPL 3.0')
                    appendNode('url', 'https://www.gnu.org/licenses/lgpl-3.0.en.html')
                    appendNode('distribution', 'repo')
                }
            }
            appendNode('developers').with {
                appendNode('developer').with {
                    appendNode('id', 'mnlipp')
                    appendNode('name', 'Michael N. Lipp')
                }
            }
        }
    }
}

jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }
}

apply from: "${project.rootDir}/gradle/eclipse.gradle"
