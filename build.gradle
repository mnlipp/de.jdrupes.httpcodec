import aQute.bnd.osgi.Processor

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:6.2.0'
    }
}

apply plugin: 'java-library'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'org.jdrupes.httpcodec'
description = "HTTP coders and decoders for non-blocking I/O"

ext.releaseVersion = "3.1.0"
ext.isSnapshot = false
version = releaseVersion + (isSnapshot ? "-SNAPSHOT" : "")

archivesBaseName = 'httpcodec'

repositories {
    mavenCentral()
}

ext {
    isCiBuild = System.getenv().get("CI") == 'true'
    isJitPackBuild = System.getenv().get("JITPACK") == 'true'
}

configurations {
    javadocTaglets
}

dependencies {
    implementation 'jakarta.activation:jakarta.activation-api:[2.1.0,3.0.0)'

    testImplementation 'junit:junit:4.12'
    testRuntimeOnly 'org.eclipse.angus:angus-activation:[2.0.0,3.0.0)'

	// Use gradle mechanims to get the artifact to baseline against.
	// We baseline against the previous release 
	// (latest excluding current)
	baseline("${group}:${archivesBaseName}:(,${releaseVersion})") {
		transitive false
	}
}

// Configure sensible layout
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }

    test {
        java {
            srcDir 'test'
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

String bundleVersion = releaseVersion +
	(isSnapshot ? ".-\${tstamp}-SNAPSHOT" : ".rel")
		
jar {
	manifest {
		attributes('Bundle-Version': bundleVersion)
	}
}

if (project.hasProperty('ignoreBaselineFailures')) {
	baseline {
		ignoreFailures true
	}
}

configurations {
    markdownDoclet
    javadocTaglets
}
 
dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:3.1.0"
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:2.0.1"
}

ext.javadocDestinationDir = file("../org.jdrupes.httpcodec.gh-pages/javadoc")

task java11doc(type: JavaExec) {
    enabled = JavaVersion.current() == JavaVersion.VERSION_17 && !isJitPackBuild
    
    dependsOn classes
    inputs.file "overview.md"
    inputs.dir "src"

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
               '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED']
    classpath sourceSets.main.compileClasspath
    classpath files(tasks.jar)
    
    outputs.dir(javadocDestinationDir)
    
    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', "JDrupes HTTP Codecs ${project.version}",
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '-docletpath', configurations.markdownDoclet.files.asType(List).join(":"),
        '--disable-auto-highlight',
        '-tagletpath', configurations.javadocTaglets.files.asType(List).join(":"),
        '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.StartUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.EndUml',
        '-overview', 'overview.md',
        '-d', javadocDestinationDir,
        '-sourcepath', 'src/',
        '-subpackages', 'org.jdrupes.httpcodec',
        '-bottom', file("misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED'
        ]
    
    ignoreExitValue true
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

task javadocJar(type: Jar) {
	dependsOn "java11doc"
	from project.javadocDestinationDir
	classifier "javadoc"
}

// Allow build without signing information (e.g. travis)
if (project.hasProperty('signing.keyId')) {
	signing {
		sign configurations.archives
	}
}

// MavenPublishing 

publishing {
        
    repositories {
        maven {
            name "snapshot"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
        maven {
            name "release"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
    }
}

// Additional configuration of publishing
apply plugin: ConfigurePublishing

configurePublishing {
    withPomXml {
        asNode().with {
            appendNode('url', 'https://github.com/mnlipp/jdrupes-httpcodec')
            appendNode('scm').with {
                appendNode('url', 'scm:git@github.com:mnlipp/jdrupes-httpcodec.git')
                appendNode('connection', 'scm:git@github.com:mnlipp/jdrupes-httpcodec.git')
                appendNode('developerConnection', 'git@github.com:mnlipp/jdrupes-httpcodec.git')
            }
            appendNode('licenses').with {
                appendNode('license').with {
                    appendNode('name', 'LGPL 3.0')
                    appendNode('url', 'https://www.gnu.org/licenses/lgpl-3.0.en.html')
                    appendNode('distribution', 'repo')
                }
            }
            appendNode('developers').with {
                appendNode('developer').with {
                    appendNode('id', 'mnlipp')
                    appendNode('name', 'Michael N. Lipp')
                }
            }
        }
    }
}

jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }
}

apply from: "${project.rootDir}/gradle/eclipse.gradle"
